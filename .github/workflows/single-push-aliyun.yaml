name: Single docker image push

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      image:
        description: 'image_name:tag'
        required: true
        default: ''
      platform:
        description: 'platform'
        required: false
        default: ''

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        # 数据预处理,判断镜像是否重名
        origin_image=${{github.event.inputs.image}}
        # 将@sha256:等字符删除
        image="${origin_image%%@*}"
        echo "image $image"
        # 获取镜像名:版本号  例如nginx:1.25.3
        image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
        echo "image_name_tag: $image_name_tag"
        # 获取命名空间 例如kasmweb,  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
        name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
        echo "name_space: $name_space"
        # 这里不要是空值影响判断
        name_space="${name_space}_"
        # 获取镜像名例如nginx
        image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
        echo "image_name: $image_name"
        echo "docker pull $image"
        docker pull $image
        platform=${{github.event.inputs.platform}}
        echo "platform: $platform"
        # 如果存在架构信息 将架构信息拼到镜像名称前面
        if [ -z "$platform" ]; then
            platform_prefix=""
        else
            platform_prefix="${platform//\//_}_"
        fi
        echo "platform_prefix is $platform_prefix"
        name_space_prefix=""

        new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
        echo "docker tag $image $new_image"
        docker tag $image $new_image
        echo "docker push $new_image"
        docker push $new_image
        echo "开始清理磁盘空间"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
        docker rmi $image
        docker rmi $new_image
        echo "磁盘空间清理完毕"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

